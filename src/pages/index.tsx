import { useRouter } from "next/router";
import Head from "next/head";
import { Button, ButtonGroup, useDisclosure } from "@chakra-ui/react";
import styles from "@/styles/Home.module.css";
import Image from "next/image";
import Link from "next/link";
import { useEffect, useState } from "react";

import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
} from "@chakra-ui/react";

export default function Home() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    email: "",
    pass: "",
    newPass: "",
    confirmPass: "",
  });
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [changePass, setChangePass] = useState(false);

  const [userId, setUserId] = useState();

  const data = {
    email: formData.email,
    password: formData.pass,
  };

  const backendData = (e: any) => {
    e.preventDefault();
    fetch("");

    if (formData.email != null && data.email === formData.email) {
      setChangePass(true);
    } else {
      alert("You are Not Signed");
    }
  };

  const handleField = async (e: any) => {
    e.preventDefault();

    try {
      const response = await fetch("http://localhost:1337/api/getdata", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      const updateflag = { password_change: result.password_change[0] };
      setUserId(result.userId[0]);

      if (result.password_change[0] == false) {
        setChangePass(true);
      } else if (result.password_change[0] == true) {
        router.push("/home");
      }
    } catch (error) {
      // Handle any errors that occur during the form submission process
    }
  };

  const handlePassword = async (e: any) => {
    e.preventDefault();
    if (formData.newPass != formData.confirmPass) {
      alert("Password is not matching");
    } else {
      const res = await fetch("http://localhost:1337/api/getpassword", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ newPass: formData.newPass, userId }),
      });
    }
  };

  const handleChange = (e:any) => {
    setFormData((prevData) => ({
      ...prevData,
      [e.target.name]: e.target.value,
    }));
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container">
        <div className="login-container">
          <div className="login-field">
            <div className="login-heading">
              <Image
                src="/images/logo.svg"
                width={122}
                height={100}
                alt="login-logo"
              />
              {changePass ? (
                <h1>Change Your Password</h1>
              ) : (
                <h1>Login to Your Account</h1>
              )}
            </div>
            {changePass ? (
              <div className="login-inputs">
                <form
                  action=""
                  onSubmit={(e) => {
                    handlePassword(e);
                  }}
                >
                  <input
                    type="password"
                    onChange={handleChange}
                    placeholder="Enter Your New Password"
                    value={formData.newPass}
                  />
                  <input
                    onChange={handleChange}
                    value={formData.confirmPass}
                    type="password"
                    placeholder="Confirm Your Password"
                  />
                  <Button colorScheme="whatsapp" type="submit">
                    Login
                  </Button>
                </form>
              </div>
            ) : (
              <div className="login-inputs">
                <form onSubmit={(e) => handleField(e)}>
                  <input
                    type="email"
                    onChange={ handleChange}
                    name="email"
                    placeholder="Enter Your Email"
                    value={formData.email}
                  />
                  <input
                    name="pass"
                    onChange={handleChange}
                    value={formData.pass}
                    type="password"
                    placeholder="******"
                  />
                  <Button colorScheme="whatsapp" type="submit">
                    Login
                  </Button>
                </form>
              </div>
            )}

            {changePass ? (
              <Link href="/dashboard">
                {" "}
                <div className="skip-step">
                  <Button>Skip This step</Button>{" "}
                </div>
              </Link>
            ) : null}
          </div>
        </div>
        <div className="login_side-img"></div>
      </div>
    </>
  );
}
